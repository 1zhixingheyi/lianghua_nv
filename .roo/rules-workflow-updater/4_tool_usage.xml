<tool_usage_guide>
  <integration_overview>
    工作流更新管理器支持双向同步机制：规范驱动更新和规则主动更新，
    实现三层DRY规范、工作流、Roo Code模式的全生态系统协同管理。
  </integration_overview>

  <dual_sync_principles>
    <principle name="规范驱动更新（被动响应）">
      <description>以三层DRY模块化规范为权威信息源驱动工作流更新</description>
      <implementation>
        - 架构层变更 → 影响所有相关工作流
        - 通用规范层变更 → 影响跨模块工作流
        - 模块专用层变更 → 影响特定模块工作流
      </implementation>
      <tools_focus>read_file, search_files, apply_diff</tools_focus>
    </principle>

    <principle name="规则主动更新（主动管理）">
      <description>基于项目需求主动更新规则，并级联同步到整个生态系统</description>
      <implementation>
        - 项目需求分析 → 更新DRY规范 → 同步工作流 → 创建/更新模式
        - 技术架构升级 → 规范重构 → 批量工作流更新 → 模式体系重建
        - 新功能开发 → 规范扩展 → 新增工作流 → 配套模式创建
      </implementation>
      <tools_focus>write_to_file, apply_diff, list_files</tools_focus>
    </principle>

    <principle name="三层生态映射机制">
      <description>建立DRY规范-工作流-模式三层生态的精确映射关系</description>
      <mapping_rules>
        <rule>架构层/01_系统总体架构.md → 系统架构设计工作流 → architect模式</rule>
        <rule>架构层/05_数据流转规范.md → 数据模块设计工作流 → data-engineer模式</rule>
        <rule>通用规范层/编码标准.md → 代码质量保证工作流 → code-reviewer模式</rule>
        <rule>模块专用层/DATA → 数据相关工作流 → data-*系列模式</rule>
        <rule>模块专用层/STRATEGIES → 策略相关工作流 → strategy-*系列模式</rule>
      </mapping_rules>
    </principle>

    <principle name="全链路一致性保证">
      <description>确保DRY规范、工作流、模式三个层级的完全一致性</description>
      <validation_points>
        <point>检查DRY规范引用路径的有效性</point>
        <point>验证工作流与规范内容的时效性</point>
        <point>确保模式行为与工作流描述的一致性</point>
        <point>保证概念术语在三个层级的统一性</point>
      </validation_points>
    </principle>

    <principle name="模式生命周期管理">
      <description>管理Roo Code模式的创建、更新、废弃全生命周期</description>
      <lifecycle_stages>
        <stage>模式创建：基于工作流自动生成模式配置和指令</stage>
        <stage>模式更新：工作流变更时同步更新模式行为</stage>
        <stage>模式废弃：工作流删除时相应处理模式</stage>
        <stage>模式重构：规范重大变更时批量重构模式体系</stage>
      </lifecycle_stages>
    </principle>
  </dual_sync_principles>

  <tool_priorities>
    <priority level=\"1\">
      <tool>list_files</tool>
      <context>三层DRY规范探索</context>
      <when>扫描三层DRY模块化规范目录结构</when>
      <why>建立规范到工作流的映射基础</why>
      <target_paths>
        <path>lianghuakaifa/docs/三层DRY模块化规范/</path>
        <path>lianghuakaifa/0_工作流开发/workflow/</path>
      </target_paths>
    </priority>
    
    <priority level=\"2\">
      <tool>read_file</tool>
      <context>规范内容分析</context>
      <when>读取DRY规范内容和工作流内容进行对比</when>
      <why>识别规范变更对工作流的影响</why>
      <focus_files>
        <file>三层DRY引用规范标准.md</file>
        <file>架构层核心规范文件</file>
        <file>现有工作流文档</file>
      </focus_files>
    </priority>

    <priority level=\"3\">
      <tool>search_files</tool>
      <context>引用关系验证</context>
      <when>查找工作流中的规范引用和相关概念</when>
      <why>验证工作流与DRY规范的一致性</why>
      <search_patterns>
        <pattern>引用架构层|引用通用规范层|引用模块专用层</pattern>
        <pattern>配置v4.0|CZSC|Tushare</pattern>
        <pattern>8大模块|数据流转|四层存储</pattern>
      </search_patterns>
    </priority>

    <priority level=\"4\">
      <tool>apply_diff</tool>
      <context>规范同步更新</context>
      <when>将DRY规范的变更同步到工作流</when>
      <why>保持工作流与权威规范的一致性</why>
      <update_types>
        <type>规范引用路径更新</type>
        <type>概念定义同步</type>
        <type>技术标准对齐</type>
      </update_types>
    </priority>
  </tool_priorities>

  <dry_aware_tool_usage>
    <tool name=\"list_files\">
      <purpose>三层DRY规范结构探索和工作流映射</purpose>
      <best_practices>
        <practice>递归扫描三层DRY规范目录了解完整结构</practice>
        <practice>按层级组织扫描：架构层→通用规范层→模块专用层</practice>
        <practice>识别规范文档的编号和命名规律</practice>
        <practice>建立规范文档与工作流的对应关系</practice>
      </best_practices>
      
      <usage_patterns>
        <pattern name=\"DRY规范全貌扫描\">
          <command>list_files(\"lianghuakaifa/docs/三层DRY模块化规范\", recursive=true)</command>
          <purpose>获取完整的DRY规范文档结构</purpose>
          <analysis_focus>
            <focus>识别三层架构的文档分布</focus>
            <focus>理解8大模块的规范组织</focus>
            <focus>发现规范文档的命名模式</focus>
          </analysis_focus>
        </pattern>

        <pattern name=\"架构层权威源识别\">
          <command>list_files(\"lianghuakaifa/docs/三层DRY模块化规范/00_架构层\", recursive=false)</command>
          <purpose>识别架构层的权威定义文档</purpose>
          <mapping_target>系统架构设计相关工作流</mapping_target>
        </pattern>

        <pattern name=\"模块专用层对应扫描\">
          <command>list_files(\"lianghuakaifa/docs/三层DRY模块化规范/02_模块专用层/01_DATA_模块专用规范\", recursive=false)</command>
          <purpose>扫描特定模块的专用规范</purpose>
          <mapping_target>对应模块的专用工作流</mapping_target>
        </pattern>

        <pattern name=\"工作流分布分析\">
          <command>list_files(\"lianghuakaifa/0_工作流开发/workflow\", recursive=true)</command>
          <purpose>了解现有工作流的组织结构</purpose>
          <comparison_with>三层DRY规范结构进行对比</comparison_with>
        </pattern>
      </usage_patterns>
    </tool>

    <tool name=\"read_file\">
      <purpose>深度分析DRY规范内容和工作流内容差异</purpose>
      <best_practices>
        <practice>批量读取相关的DRY规范文档</practice>
        <practice>重点关注引用格式和权威定义</practice>
        <practice>对比工作流内容与规范的一致性</practice>
        <practice>识别过时的规范引用</practice>
      </best_practices>

      <usage_patterns>
        <pattern name=\"权威规范内容分析\">
          <command>read_file([
            \"lianghuakaifa/docs/三层DRY模块化规范/三层DRY引用规范标准.md\",
            \"lianghuakaifa/docs/三层DRY模块化规范/00_架构层/01_系统总体架构.md\",
            \"lianghuakaifa/docs/三层DRY模块化规范/00_架构层/05_数据流转规范.md\"
          ])</command>
          <purpose>获取核心架构定义和引用规范</purpose>
          <analysis_points>
            <point>理解DRY引用格式标准</point>
            <point>识别权威概念定义</point>
            <point>了解技术特色要求</point>
          </analysis_points>
        </pattern>

        <pattern name=\"工作流规范符合性检查\">
          <command>read_file([
            \"lianghuakaifa/0_工作流开发/workflow/01_基础通用工作流/配置管理工作流.md\",
            \"lianghuakaifa/0_工作流开发/workflow/02_数据层工作流/数据模块设计工作流.md\"
          ])</command>
          <purpose>检查工作流是否符合DRY规范</purpose>
          <validation_checks>
            <check>是否使用标准化引用格式</check>
            <check>是否引用了正确的权威定义</check>
            <check>是否体现了技术特色要求</check>
          </validation_checks>
        </pattern>

        <pattern name=\"模块专用规范深度分析\">
          <command>read_file([
            \"lianghuakaifa/docs/三层DRY模块化规范/02_模块专用层/01_DATA_模块专用规范/01_架构设计.md\",
            \"lianghuakaifa/docs/三层DRY模块化规范/02_模块专用层/01_DATA_模块专用规范/02_核心功能.md\"
          ])</command>
          <purpose>深入理解模块专用规范要求</purpose>
          <mapping_to>数据层相关工作流</mapping_to>
        </pattern>
      </usage_patterns>
    </tool>

    <tool name=\"search_files\">
      <purpose>验证DRY规范引用和概念的一致性</purpose>
      <best_practices>
        <practice>搜索DRY规范中的关键概念在工作流中的使用</practice>
        <practice>验证引用格式的标准化程度</practice>
        <practice>查找过时或不正确的概念引用</practice>
        <practice>识别缺失的规范引用</practice>
      </best_practices>

      <usage_patterns>
        <pattern name=\"DRY引用格式验证\">
          <command>search_files(\"lianghuakaifa/0_工作流开发/workflow\", \"引用架构层|引用通用规范层|引用模块专用层\", \"*.md\")</command>
          <purpose>检查工作流是否使用标准DRY引用格式</purpose>
          <validation_criteria>
            <criteria>引用格式是否符合标准</criteria>
            <criteria>引用路径是否正确</criteria>
            <criteria>引用说明是否清晰</criteria>
          </validation_criteria>
        </pattern>

        <pattern name=\"技术特色概念一致性检查\">
          <command>search_files(\"lianghuakaifa/0_工作流开发/workflow\", \"CZSC|95\\.50%|配置v4\\.0|四层存储|Tushare\", \"*.md\")</command>
          <purpose>验证技术特色概念在工作流中的表述一致性</purpose>
          <consistency_checks>
            <check>CZSC技术特色描述是否一致</check>
            <check>配置v4.0概念是否准确</check>
            <check>Tushare数据标准是否统一</check>
          </consistency_checks>
        </pattern>

        <pattern name=\"过时概念识别\">
          <command>search_files(\"lianghuakaifa/0_工作流开发/workflow\", \"ConfigManager|EventBus|BaseStrategy\", \"*.md\")</command>
          <purpose>查找工作流中可能过时的概念引用</purpose>
          <update_needed>识别需要与DRY规范对齐的概念</update_needed>
        </pattern>

        <pattern name=\"8大模块概念验证\">
          <command>search_files(\"lianghuakaifa/0_工作流开发/workflow\", \"DATA|STRATEGIES|BACKTEST|RISK|EXECUTION|PORTFOLIO|MONITORING|ENGINE\", \"*.md\")</command>
          <purpose>检查8大模块概念在工作流中的使用</purpose>
          <alignment_check>与DRY规范中的模块定义对比</alignment_check>
        </pattern>
      </usage_patterns>
    </tool>

    <tool name=\"apply_diff\">
      <purpose>将DRY规范变更精确同步到工作流</purpose>
      <best_practices>
        <practice>基于DRY规范的权威定义更新工作流</practice>
        <practice>使用标准化的DRY引用格式</practice>
        <practice>保持工作流与规范的版本一致性</practice>
        <practice>更新技术特色相关描述</practice>
      </best_practices>

      <usage_patterns>
        <pattern name=\"DRY引用格式标准化\">
          <description>将工作流中的引用更新为标准DRY格式</description>
          <example><![CDATA[
<apply_diff>
<path>workflow/02_数据层工作流/数据模块设计工作流.md</path>
<diff>
<<<<<<< SEARCH
:start_line:15
-------
参考系统架构设计文档中的数据模块定义...
=======
> **引用架构层**: [系统总体架构](../../docs/三层DRY模块化规范/00_架构层/01_系统总体架构.md#8大核心模块) - 8大模块定义
> **引用架构层**: [数据流转规范](../../docs/三层DRY模块化规范/00_架构层/05_数据流转规范.md#l0-l3数据分层处理) - L0-L3分层概念定义

### DATA模块特定实现
基于上述架构层定义，DATA模块的具体实现包括：
>>>>>>> REPLACE
</diff>
</apply_diff>
          ]]></example>
        </pattern>

        <pattern name=\"技术特色概念同步\">
          <description>将技术特色概念与DRY规范权威定义同步</description>
          <example><![CDATA[
<apply_diff>
<path>workflow/03_业务层工作流/策略开发工作流.md</path>
<diff>
<<<<<<< SEARCH
:start_line:45
-------
基于CZSC技术实现高收益率策略...
=======
> **引用架构层**: [技术标准规范](../../docs/三层DRY模块化规范/00_架构层/07_技术标准规范.md#czsc技术特色概念) - CZSC技术特色概念（95.50%收益率目标）

### CZSC策略开发规范
基于CZSC技术特色，实现95.50%收益率目标的策略开发...
>>>>>>> REPLACE
</diff>
</apply_diff>
          ]]></example>
        </pattern>

        <pattern name=\"配置管理概念更新\">
          <description>基于配置v4.0规范更新配置相关描述</description>
          <example><![CDATA[
<apply_diff>
<path>workflow/01_基础通用工作流/配置管理工作流.md</path>
<diff>
<<<<<<< SEARCH
:start_line:67
-------
使用ConfigManager进行配置管理...
=======
> **引用架构层**: [配置管理架构](../../docs/三层DRY模块化规范/00_架构层/08_配置管理架构.md#配置v40四层存储) - 配置v4.0四层存储概念
> **引用通用规范层**: [配置管理API规范](../../docs/三层DRY模块化规范/01_通用规范层/02_配置管理API规范.md) - 配置API详细规范

### 配置v4.0四层存储实现
基于配置v4.0架构，实现四层存储的配置管理...
>>>>>>> REPLACE
</diff>
</apply_diff>
          ]]></example>
        </pattern>

        <pattern name=\"模块专用差异化实现\">
          <description>基于模块专用层规范更新模块特定内容</description>
          <example><![CDATA[
<apply_diff>
<path>workflow/02_数据层工作流/数据质量管理工作流.md</path>
<diff>
<<<<<<< SEARCH
:start_line:89
-------
### 数据质量控制流程
通用的数据质量检查...
=======
> **引用通用规范层**: [数据质量标准](../../docs/三层DRY模块化规范/01_通用规范层/02_数据规范/数据质量标准.md) - 数据质量控制
> **引用模块专用层**: [数据质量控制](../../docs/三层DRY模块化规范/02_模块专用层/01_DATA_模块专用规范/04_质量控制.md) - DATA模块质量控制

### DATA模块特定质量控制
基于通用数据质量标准，DATA模块的特定实现包括：
1. **Tushare数据质量验证**: 专门针对Tushare数据源的质量检查
2. **L0-L3分层质量控制**: 不同数据层级的质量标准
3. **CZSC数据增强质量**: 增强数据的质量保证
>>>>>>> REPLACE
</diff>
</apply_diff>
          ]]></example>
        </pattern>
      </usage_patterns>
    </tool>

    <tool name=\"write_to_file\">
      <purpose>创建DRY规范驱动的工作流更新报告和文档</purpose>
      <when_to_use>
        <scenario>生成DRY规范与工作流的映射关系文档</scenario>
        <scenario>创建规范同步更新的分析报告</scenario>
        <scenario>建立规范变更的影响评估报告</scenario>
      </when_to_use>
      
      <usage_patterns>
        <pattern name=\"DRY规范映射文档\">
          <purpose>创建三层DRY规范与工作流的映射关系文档</purpose>
          <file_structure>
            <section>三层DRY规范结构概览</section>
            <section>规范到工作流映射表</section>
            <section>技术特色在工作流中的体现</section>
            <section>规范同步更新机制</section>
          </file_structure>
        </pattern>

        <pattern name=\"规范变更影响分析\">
          <purpose>分析DRY规范变更对工作流的影响</purpose>
          <analysis_dimensions>
            <dimension>架构层变更影响范围</dimension>
            <dimension>通用规范层变更影响</dimension>
            <dimension>模块专用层变更影响</dimension>
            <dimension>技术特色概念变更影响</dimension>
          </analysis_dimensions>
        </pattern>
      </usage_patterns>
    </tool>
  </dry_aware_tool_usage>

  <workflow_execution_with_dry>
    <phase name=\"DRY规范驱动的差距识别\">
      <primary_tools>
        <tool name=\"list_files\">扫描三层DRY规范和工作流结构</tool>
        <tool name=\"read_file\">分析DRY规范权威定义和工作流内容</tool>
        <tool name=\"search_files\">验证DRY概念在工作流中的使用</tool>
      </primary_tools>
      
      <tool_sequence>
        <step>1. list_files 扫描三层DRY规范完整结构</step>
        <step>2. read_file 获取DRY引用规范标准和核心概念</step>
        <step>3. list_files 扫描现有工作流结构</step>
        <step>4. read_file 批量读取工作流内容</step>
        <step>5. search_files 验证DRY概念和引用格式</step>
        <step>6. 生成DRY规范符合性分析报告</step>
      </tool_sequence>
    </phase>

    <phase name=\"规范驱动的更新执行\">
      <primary_tools>
        <tool name=\"apply_diff\">基于DRY规范更新工作流</tool>
        <tool name=\"read_file\">验证更新结果</tool>
      </primary_tools>
      
      <update_priorities>
        <priority level=\"P0\">架构层权威定义不一致</priority>
        <priority level=\"P1\">DRY引用格式不标准</priority>
        <priority level=\"P2\">技术特色概念表述不准确</priority>
        <priority level=\"P3\">模块专用规范差异化不足</priority>
      </update_priorities>
    </phase>

    <phase name=\"DRY一致性验证\">
      <validation_dimensions>
        <dimension name=\"引用格式验证\">
          <check>是否使用标准DRY引用格式</check>
          <check>引用路径是否正确有效</check>
          <check>引用说明是否清晰准确</check>
        </dimension>
        
        <dimension name=\"概念一致性验证\">
          <check>技术特色概念表述是否与规范一致</check>
          <check>8大模块概念使用是否准确</check>
          <check>配置v4.0概念是否正确引用</check>
        </dimension>
        
        <dimension name=\"层级权威性验证\">
          <check>是否正确引用架构层权威定义</check>
          <check>是否适当引用通用规范层内容</check>
          <check>是否体现模块专用层差异化</check>
        </dimension>
      </validation_dimensions>
    </phase>
  </workflow_execution_with_dry>

  <error_handling_for_dry>
    <common_errors>
      <error name=\"DRY规范路径错误\">
        <cause>三层DRY规范文件路径变更或重组</cause>
        <solution>
          1. 重新扫描DRY规范目录结构
          2. 更新映射关系文档
          3. 批量修正工作流中的引用路径
        </solution>
      </error>

      <error name=\"概念定义不一致\">
        <cause>工作流中的概念与DRY规范权威定义不符</cause>
        <solution>
          1. 查找DRY规范中的权威定义
          2. 对比工作流中的概念表述
          3. 基于权威定义更新工作流内容
        </solution>
      </error>

      <error name=\"引用格式不标准\">
        <cause>工作流未使用标准DRY引用格式</cause>
        <solution>
          1. 学习DRY引用规范标准
          2. 识别不标准的引用格式
          3. 批量更新为标准格式
        </solution>
      </error>
    </common_errors>

    <recovery_strategies>
      <strategy name=\"规范权威回溯\">
        <description>当概念定义有歧义时，回溯到DRY规范权威定义</description>
        <steps>
          <step>1. 定位概念在DRY规范中的权威定义位置</step>
          <step>2. 分析权威定义的完整内容</step>
          <step>3. 基于权威定义修正工作流表述</step>
          <step>4. 建立标准引用链接</step>
        </steps>
      </strategy>

      <strategy name=\"分层验证修正\">
        <description>按照DRY三层架构逐层验证和修正</description>
        <steps>
          <step>1. 验证架构层概念的正确性</step>
          <step>2. 检查通用规范层的引用准确性</step>
          <step>3. 确认模块专用层的差异化实现</step>
          <step>4. 保证三层的逻辑一致性</step>
        </steps>
      </strategy>
    </recovery_strategies>
  </error_handling_for_dry>

  <dual_sync_automation>
    <规范驱动同步>
      <description>监控三层DRY规范的变更并自动触发下游更新</description>
      <monitoring_targets>
        <target>架构层核心文档变更</target>
        <target>通用规范层规范更新</target>
        <target>模块专用层规范修改</target>
        <target>技术特色概念调整</target>
      </monitoring_targets>
      <automation_rules>
        <rule>架构层变更 → 自动评估影响范围 → 批量更新工作流 → 同步相关模式</rule>
        <rule>引用格式变更 → 自动检测不符合项 → 批量格式化 → 更新模式引用</rule>
        <rule>概念定义更新 → 自动查找相关工作流 → 同步概念表述 → 调整模式行为</rule>
      </automation_rules>
    </规范驱动同步>

    <规则主动同步>
      <description>基于项目需求主动更新规则并级联同步整个生态</description>
      <trigger_scenarios>
        <scenario>新功能开发需要扩展规范</scenario>
        <scenario>技术架构升级需要规范重构</scenario>
        <scenario>业务需求变化需要规则调整</scenario>
        <scenario>模块新增需要完整生态构建</scenario>
      </trigger_scenarios>
      <automation_workflow>
        <step>1. 需求分析 → 确定规范更新范围</step>
        <step>2. DRY规范更新 → 修改架构层/通用层/专用层</step>
        <step>3. 工作流批量更新 → 基于新规范同步工作流</step>
        <step>4. 模式体系同步 → 创建/更新/重构相关模式</step>
        <step>5. 一致性验证 → 确保三层完全协同</step>
      </automation_workflow>
    </规则主动同步>

    <生态一致性保证>
      <description>确保DRY规范-工作流-模式三层始终保持一致</description>
      <consistency_checks>
        <check>概念术语在三层的统一性</check>
        <check>引用路径的有效性和准确性</check>
        <check>技术特色在三层的一致体现</check>
        <check>模式行为与工作流描述的匹配度</check>
      </consistency_checks>
      <conflict_resolution>
        <principle>以DRY规范为权威信息源</principle>
        <principle>工作流必须符合规范要求</principle>
        <principle>模式行为必须与工作流一致</principle>
        <principle>任何不一致都必须追溯到源头解决</principle>
      </conflict_resolution>
    </生态一致性保证>
  </dual_sync_automation>
</tool_usage_guide>